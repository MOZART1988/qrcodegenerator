<?php

namespace app\modules\users\models;

use mtemplate\mclasses\ActiveRecord;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\helpers\ArrayHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "users".
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $email
 * @property string $first_name
 * @property string $last_name
 * @property string $role
 * @property integer $is_from_social
 * @property integer $is_finish_registration
 * @property string $create_date
 * @property string $update_date
 * @property integer $is_active
 * @property integer $lang_id
 * @property string $about
 * @property string $avatar
 * @property string $phone
 *
 * @property Pages[] $pages
 */
class Users extends ActiveRecord
{

    private $oldPassword;

    /**
     * @var string
     */
    public $newPassword;

    const ROLE_GUEST = 'guest';
    const ROLE_USER = 'user';
    const ROLE_AUTHOR = 'author';
    const ROLE_EDITOR = 'editor';
    const ROLE_ADMIN = 'admin';

    public static $roles = [
        self::ROLE_USER => 'Обычный пользователь',
        self::ROLE_AUTHOR => 'Эксперт',
        self::ROLE_EDITOR => 'Редактор',
        self::ROLE_ADMIN => 'Администратор'
    ];

    /**
     * @var UploadedFile
     */
    public $imageFile;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'users';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['username', 'email', 'password', 'role'], 'required'],
            [['newPassword'], 'string', 'min' => 6],
            [['username'], 'unique'],
            [['email'], 'email'],
            [['email'], 'unique'],
            [['first_name', 'last_name'], 'safe'],
            [['is_active', 'lang_id'], 'integer'],
            [['imageFile'], 'image', 'on' => 'upload'],
            [['username', 'password', 'email'], 'string', 'max' => 255]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('users', 'ID'),
            'username' => Yii::t('users', 'Имя пользователя'),
            'password' => Yii::t('users', 'Пароль'),
            'email' => Yii::t('users', 'E-mail'),
            'create_date' => Yii::t('users', 'Дата создания'),
            'update_date' => Yii::t('users', 'Дата изменения'),
            'is_active' => Yii::t('users', 'Активность'),
            'role' => Yii::t('users', 'Роль'),
            'first_name' => Yii::t('users', 'Имя'),
            'last_name' => Yii::t('users', 'Фамилия'),
            'string' => Yii::t('users', 'Об авторе'),
            'avatar' => Yii::t('users', 'Аватар'),
            'imageFile' => Yii::t('users', 'Аватар'),
            'about' => Yii::t('users', 'Об авторе'),
            'lang_id' => Yii::t('users', 'Язык'),
        ];
    }

    public function behaviors()
    {
        return [
            'Timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['create_date', 'update_date'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['update_date']
                ],
                'value' => new Expression('NOW()'),
            ]
        ];
    }

    public function afterFind()
    {
        $this->oldPassword = $this->password;
    }

    public function beforeValidate()
    {
        if (!empty($this->newPassword)) {
            $this->setPassword($this->newPassword);
        }

        return parent::beforeValidate();
    }

    public function beforeSave($insert)
    {
        if (!empty($this->newPassword)) {
            $this->setPassword($this->newPassword);
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function isAdmin()
    {
        return in_array($this->role, ['admin', 'editor', 'author']);
    }

    public static function getAuthors()
    {
        $users = self::find()->where(['role' => ['admin', 'editor', 'author'], 'is_active' => 1])->asArray()->all();

        return ArrayHelper::map($users, 'id', 'first_name');
    }

    /**
     * @return string
     * @deprecated
     */
    public function getUserFio()
    {
        return $this->getFullName();
    }

    /**
     * Возвращает имя и фамилию пользователя
     *
     * @return string
     */
    public function getFullName()
    {
        return "{$this->first_name} {$this->last_name}";
    }

    /**
     * @param $password
     */
    public function setPassword($password)
    {
        $this->password = \Yii::$app->security->generatePasswordHash($password);
    }
}
