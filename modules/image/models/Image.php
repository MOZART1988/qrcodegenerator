<?php

namespace app\modules\image\models;

use Imagine\Image\ManipulatorInterface;
use Yii;
use yii\db\Exception;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;

/**
 * This is the model class for table "image".
 *
 * @property integer $id
 * @property string $name
 * @property string $model_name
 * @property integer $model_id
 * @property integer $sort_order
 * @property string $description
 * @property string $created_at
 * @property string $updated_at
 */
class Image extends \yii\db\ActiveRecord
{

    public static $storageDir = 'media';

    public static $previewSizes = [
        [660, 357],
        [305, 250]
    ];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'image';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['model_id', 'sort_order'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['model_name', 'name', 'description'], 'string', 'max' => 255],
            [['sort_order'], 'default', 'value' => function ($model) {
                $count = $this->find()->andWhere(['model_name' => $model->model_name, 'model_id' => $model->model_id])->count();
                return $count > 0 ? $count++ : 0;
            }]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'model_name' => 'Model Name',
            'model_id' => 'Model ID',
            'sort_order' => 'Sort Order',
            'description' => 'Description',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @inheritdoc
     * @return \app\modules\image\models\query\ImageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \app\modules\image\models\query\ImageQuery(get_called_class());
    }

    public function getModel()
    {
        return $this->hasOne($this->model_name, ['id' => 'model_id']);
    }

    public function getModelTableName()
    {
        return $this->model->tableName();
    }

    public function getImageUrl($suffix = false)
    {
        if ($suffix) {
            return '/media/' . $this->modelTableName . '/' . $this->model_id . '/' . $suffix . $this->name;
        }

        return '/media/' . $this->modelTableName . '/' . $this->model_id . '/' . $this->name;
    }

    public function beforeDelete()
    {
        if (!parent::beforeDelete()) {
            return false;
        }

        if (is_file(Yii::getAlias('@webroot') . $this->imageUrl)) {
            unlink(Yii::getAlias('@webroot') . $this->imageUrl);
        }

        Image::updateAllCounters(['sort_order' => -1], [
                'and',
                [
                    'model_name' => $this->model_name,
                    'model_id' => $this->model_id
                ],
                [
                    '>',
                    'sort_order',
                    $this->sort_order
                ]
            ]
        );

        return true;
    }

    public static function uploadFile(UploadedFile $file, $tableName, $dir)
    {
        try {
            $path = Yii::getAlias('@webroot') . '/' . self::$storageDir . '/' . $tableName . '/' . $dir;
            if (FileHelper::createDirectory($path)) {
                $filename = Yii::$app->security->generateRandomString(6) . '.' . $file->extension;
                $file->saveAs($path . '/' . $filename);
                return $filename;
            }
        } catch (\Exception $exception) { /* TODO Output to interface*/
        }
    }

    public static function saveFile($filename, $modelClass, $modelItem)
    {
        $model = new Image();
        $model->name = $filename;
        $model->model_name = $modelClass;
        $model->model_id = $modelItem;
        $model->save();
    }

    public function getFullImagePath()
    {
        return
            Yii::getAlias('@webroot') . '/' . self::$storageDir . '/' . $this->getModelTableName() . '/' . $this->model_id . '/' . $this->name;
    }

    public function getImageName()
    {
        if (is_file($this->getFullImagePath())) {
            return basename($this->getFullImagePath());
        }

        throw new Exception('File not found');
    }

    public function getDirectoryPath()
    {
        return Yii::getAlias('@webroot') . '/' . self::$storageDir . '/' . $this->getModelTableName() . '/' . $this->model_id;
    }

    public function afterSave($insert, $changedAttributes)
    {
        if ($insert) {
            $this->createPreview();
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function createPreview()
    {
        foreach (self::$previewSizes as $sizes) {
            $suffix = '_' . $sizes[0] . 'x' . $sizes[1];
            try {
                \yii\imagine\Image::thumbnail($this->getFullImagePath(),
                    $sizes[0], $sizes[1], ManipulatorInterface::THUMBNAIL_INSET
                )->save($this->getDirectoryPath() . '/' . $suffix . '_' . $this->getImageName(), ['quality' => 100]);
            } catch (\Exception $e) {
                print_r($e->getMessage());
                exit;
            }
        }
    }
}
